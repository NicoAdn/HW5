#include <Wire.h>
#include <SPI.h>
#include <SparkFunLSM9DS1.h>
#include <Keyboard.h>

LSM9DS1 imu;

#define PRINT_CALCULATED
//#define PRINT_RAW
#define PRINT_SPEED 250 // 250 ms between prints
static unsigned long lastPrint = 0; // Keep track of print time

float accelX, accelY, accelZ;
float accAngleX, accAngleY;


#define DECLINATION -8.58 // Declination (degrees) in Boulder, CO.

//Function definitions


void setup()
{
  Serial.begin(115200);

  //Keyboard emulation
  Keyboard.begin();

  //Touch sensor
  pinMode(7, INPUT); //The touch sensor is on pin 7
  
  Wire.begin();

  if (imu.begin() == false) // with no arguments, this uses default addresses (AG:0x6B, M:0x1E) and i2c port (Wire).
  {
    Serial.println("Failed to communicate with LSM9DS1.");
    Serial.println("Double-check wiring.");
    Serial.println("Default settings in this sketch will " \
                   "work for an out of the box LSM9DS1 " \
                   "Breakout, but may need to be modified " \
                   "if the board jumpers are.");
    while (1);
  }
}

void loop()
{
  // Update the sensor values whenever new data is available
 if ( imu.gyroAvailable() )
  {
    // To read from the gyroscope,  first call the
    // readGyro() function. When it exits, it'll update the
    // gx, gy, and gz variables with the most current data.
    imu.readGyro();
  }
  
  if ( imu.accelAvailable() )
  {
    imu.readAccel();
  }
  

  if ((lastPrint + PRINT_SPEED) < millis())
  {
  
    getAccAngles(-imu.ax, -imu.ay, imu.az);    
    Serial.println();
    lastPrint = millis(); // Update lastPrint time
  }

  playTetris(); //This function contains gesture recognition
}

void getAccAngles(float ax, float ay, float az)
{
  accAngleX = atan2(ay, az);
  accAngleY = atan2(-ax, sqrt(ay * ay + az * az));

  accAngleX *= 180.0 / PI;
  accAngleY *= 180.0 / PI;
  
}


void playTetris()      //gesture recongnition
{ 
      
    if(digitalRead(7) == LOW){   //a LOW(0V) voltage output from the touch sensor means that the user is not touching the sensor 


      //Tilting the gun left without touch 
      if(accAngleY <= -50){  
        Keyboard.press(KEY_LEFT_ARROW);
        Keyboard.release(KEY_LEFT_ARROW);
        delay(400);
      }

      //Tilting the gun right without touch
      if(accAngleY >= 50){
        Keyboard.press(KEY_RIGHT_ARROW);
        Keyboard.release(KEY_RIGHT_ARROW);
        delay(400);
      }

      //Raising the tip of the gun without touch
      if(accAngleX <= -50){
        Keyboard.press('c');
        Keyboard.release('c');
        delay(600);
      }

      //Lowering the tip of the gun without touch
      if(accAngleX >= 30){
        Keyboard.press(KEY_DOWN_ARROW);
        Keyboard.release(KEY_DOWN_ARROW);
        delay(50);
      }

    }

    else if(digitalRead(7) == HIGH){        //a HIGH(5V) voltage output from the touch sensor means that the user is not touching the sensor 
        
      //Tilting the gun left with touch
      if(accAngleY <= -50){
        Keyboard.press('w');
        Keyboard.release('w');
        delay(400);
      }

      //Tilting the gun left with touch
      if(accAngleY >= 50){
        Keyboard.press(KEY_UP_ARROW);
        Keyboard.release(KEY_UP_ARROW);
        delay(400);
      }

      //Lowering the tip of the gun without touch
      if(accAngleX >= 30){
        Keyboard.write(' ');
        delay(600);
      }
  
    }
 
}
